$ErrorActionPreference = "SilentlyContinue"

# Funzione per ottenere la firma del file
function Get-Signature {
    param (
        [string[]]$FilePath
    )
    $Existence = Test-Path -PathType "Leaf" -Path $FilePath
    $Authenticode = (Get-AuthenticodeSignature -FilePath $FilePath -ErrorAction SilentlyContinue).Status
    $Signature = "Invalid Signature (UnknownError)"

    if ($Existence) {
        if ($Authenticode -eq "Valid") {
            $Signature = "Valid Signature"
        }
        elseif ($Authenticode -eq "NotSigned") {
            $Signature = "Invalid Signature (NotSigned)"
        }
        elseif ($Authenticode -eq "HashMismatch") {
            $Signature = "Invalid Signature (HashMismatch)"
        }
        elseif ($Authenticode -eq "NotTrusted") {
            $Signature = "Invalid Signature (NotTrusted)"
        }
        elseif ($Authenticode -eq "UnknownError") {
            $Signature = "Invalid Signature (UnknownError)"
        }
        return $Signature
    } else {
        return "File Was Not Found"
    }
}

# Funzione per determinare su quale disco si trova il file e il tipo di file system
function Get-DriveInfo {
    param (
        [string]$FilePath
    )
    $driveLetter = $FilePath.Split(":")[0]
    $drive = Get-PSDrive -Name $driveLetter
    if ($drive) {
        return @{
            Drive = $driveLetter
            FileSystem = $drive.Provider.Name
        }
    } else {
        return @{
            Drive = $driveLetter
            FileSystem = "Unknown"
        }
    }
}

# Funzione per controllare se il file è stato eliminato o spostato nel cestino
function Check-FileDeletion {
    param (
        [string]$FilePath
    )
    if (Test-Path -Path $FilePath) {
        return "File Exists"
    }
    
    $recycleBinPath = "$env:SystemDrive\$Recycle.Bin"
    $recycleItems = Get-ChildItem -Recurse -Force $recycleBinPath | Where-Object { $_.PSIsContainer -eq $false } | Select-Object FullName
    $foundInRecycle = $recycleItems | Where-Object { $_.FullName -like "*$FilePath*" }

    if ($foundInRecycle) {
        return "File Moved to Recycle Bin"
    } else {
        return "File Deleted Permanently (Shift+Del or Cleared from Recycle Bin)"
    }
}

Clear-Host

# Interfaccia grafica di avvio
Write-Host "" -ForegroundColor Red
Write-Host "   ░██████╗███████╗██╗░░░░░███████╗" -ForegroundColor Red
Write-Host "   ██╔════╝██╔════╝██║░░░░░██╔════╝" -ForegroundColor Red
Write-Host "   ╚█████╗░█████╗░░██║░░░░░█████╗░░" -ForegroundColor Red
Write-Host "   ░╚═══██╗██╔══╝░░██║░░░░░██╔══╝░░" -ForegroundColor Red
Write-Host "   ██████╔╝███████╗███████╗██║░░░░░" -ForegroundColor Red
Write-Host "   ╚═════╝░╚══════╝╚══════╝╚═╝░░░░░" -ForegroundColor Red

Write-Host "" -ForegroundColor Blue
Write-Host "   Made by Srdomy" -ForegroundColor Blue
Write-Host ""

# Funzione per controllare se si dispone dei privilegi di amministratore
function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
    $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}
if (!(Test-Admin)) {
    Write-Warning "Please Run This Script as Admin."
    Start-Sleep 10
    Exit
}

Write-Host "Checking for registry access..." -ForegroundColor Yellow

$sw = [Diagnostics.Stopwatch]::StartNew()

if (!(Get-PSDrive -Name HKLM -PSProvider Registry)) {
    Try {
        New-PSDrive -Name HKLM -PSProvider Registry -Root HKEY_LOCAL_MACHINE
    } Catch {
        Write-Warning "Error Mounting HKEY_Local_Machine"
        Exit
    }
}

Write-Host "Registry access verified." -ForegroundColor Green

$bv = ("bam", "bam\State")
Try {
    $Users = foreach($ii in $bv) {
        Get-ChildItem -Path "HKLM:\SYSTEM\CurrentControlSet\Services\$($ii)\UserSettings\" | Select-Object -ExpandProperty PSChildName
    }
} Catch {
    Write-Warning "Error Parsing BAM Key. Likely unsupported Windows Version"
    Exit
}

Write-Host "BAM users retrieved: $($Users.Count)" -ForegroundColor Green

$rpath = @("HKLM:\SYSTEM\CurrentControlSet\Services\bam\","HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\")

$UserTime = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").TimeZoneKeyName
$UserBias = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").ActiveTimeBias
$UserDay = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").DaylightBias

$Bam = Foreach ($Sid in $Users) {
    foreach($rp in $rpath) {
        $BamItems = Get-Item -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Property
        
        Try {
            $objSID = New-Object System.Security.Principal.SecurityIdentifier($Sid)
            $User = $objSID.Translate([System.Security.Principal.NTAccount]) 
            $User = $User.Value
        } Catch {
            $User = ""
        }
        
        ForEach ($Item in $BamItems) {
            $Key = Get-ItemProperty -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty $Item

            if ($key.length -eq 24) {
                $Hex = [System.BitConverter]::ToString($key[7..0]) -replace "-",""
                $TimeLocal = Get-Date ([DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $TimeUTC = Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $Bias = -([convert]::ToInt32([Convert]::ToString($UserBias,2),2))
                $Day = -([convert]::ToInt32([Convert]::ToString($UserDay,2),2)) 
                $Biasd = $Bias / 60
                $Dayd = $Day / 60
                $TimeUser = (Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))).addminutes($Bias) -Format "yyyy-MM-dd HH:mm:ss") 
                
                # File path e controllo
                $d = if (((split-path -path $item | ConvertFrom-String -Delimiter "\\").P3) -match '\d{1}') { ((split-path -path $item).Remove(23)).trimstart("\Device\HarddiskVolume") } else { $d = "" }
                $f = if (((split-path -path $item | ConvertFrom-String -Delimiter "\\").P3) -match '\d{1}') { Split-path -leaf ($item).TrimStart() } else { $item } 
                $cp = if (((split-path -path $item | ConvertFrom-String -Delimiter "\\").P3) -match '\d{1}') { ($item).Remove(1,23) } else { $cp = "" }
                $path = if (((split-path -path $item | ConvertFrom-String -Delimiter "\\").P3) -match '\d{1}') { Join-Path -Path "C:" -ChildPath $cp } else { $item } 

                $driveInfo = Get-DriveInfo -FilePath $path
                $Sig = Get-Signature -FilePath $path
                $deletionStatus = Check-FileDeletion -FilePath $path

                # Creazione oggetto BAM
                [PSCustomObject]@{
                    'Time UTC' = $TimeUTC
                    'Time Local' = $TimeLocal
                    'User Time' = $TimeUser
                    'Bias' = $Biasd
                    'Daylight Bias' = $Dayd
                    Path = $path
                    Signature = $Sig
                    Drive = $driveInfo.Drive
                    FileSystem = $driveInfo.FileSystem
                    'Deletion Status' = $deletionStatus
                    User = $User
                    SID = $Sid
                    Regpath = $rp
                }
            }
        }
    }
}

$Bam | Out-GridView -PassThru -Title "BAM key entries $($Bam.count) - User TimeZone: ($UserTime) -> ActiveBias: ($Bias) - DayLightTime: ($Day)"

$sw.stop()
$t = $sw.Elapsed.TotalMinutes
Write-Host ""
Write-Host "Elapsed Time $t Minutes" -ForegroundColor Yellow
