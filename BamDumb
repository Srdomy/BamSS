$ErrorActionPreference = "SilentlyContinue"

function Get-Signature {
    [CmdletBinding()]
    param (
        [string[]]$FilePath
    )

    $Existence = Test-Path -PathType "Leaf" -Path $FilePath
    $Authenticode = (Get-AuthenticodeSignature -FilePath $FilePath -ErrorAction SilentlyContinue).Status
    $Signature = "Invalid Signature (UnknownError)"

    if ($Existence) {
        if ($Authenticode -eq "Valid") {
            $Signature = "Valid Signature"
        }
        elseif ($Authenticode -eq "NotSigned") {
            $Signature = "Invalid Signature (NotSigned)"
        }
        elseif ($Authenticode -eq "HashMismatch") {
            $Signature = "Invalid Signature (HashMismatch)"
        }
        elseif ($Authenticode -eq "NotTrusted") {
            $Signature = "Invalid Signature (NotTrusted)"
        }
        elseif ($Authenticode -eq "UnknownError") {
            $Signature = "Invalid Signature (UnknownError)"
        }
        return $Signature
    } else {
        $Signature = "File Was Not Found"
        return $Signature
    }
}

# Funzione per controllare se l'estensione del file è cambiata
function Check-FileExtensionChange {
    param (
        [string]$FilePath
    )

    if (-not (Test-Path -Path $FilePath)) {
        return "File Was Not Found"
    }

    # Ottieni l'estensione attuale del file
    $CurrentExtension = [System.IO.Path]::GetExtension($FilePath)

    # Ottieni il MIME type del file
    Add-Type -AssemblyName System.Web
    $MimeType = [System.Web.MimeMapping]::GetMimeMapping($FilePath)

    # Prevedi l'estensione da MIME type
    $ExpectedExtension = ""
    switch ($MimeType) {
        "image/jpeg" { $ExpectedExtension = ".jpg" }
        "image/png" { $ExpectedExtension = ".png" }
        "application/pdf" { $ExpectedExtension = ".pdf" }
        "text/plain" { $ExpectedExtension = ".txt" }
        "application/zip" { $ExpectedExtension = ".zip" }
        # Aggiungi altri tipi MIME se necessario
        default { $ExpectedExtension = "" }
    }

    if ($ExpectedExtension -and ($CurrentExtension -ne $ExpectedExtension)) {
        return "File extension changed (Expected: $ExpectedExtension, Actual: $CurrentExtension)"
    } elseif (-not $ExpectedExtension) {
        return "Could not determine expected extension for MIME type: $MimeType"
    } else {
        return "File extension is correct"
    }
}

Clear-Host

Write-Host ""
Write-Host ""
Write-Host -ForegroundColor Red "   ██████╗░██╗░░░██╗███╗░░░███╗██████╗░";
Write-Host -ForegroundColor Red "   ██╔══██╗██║░░░██║████╗░████║██╔══██╗";
Write-Host -ForegroundColor Red "   ██║░░██║██║░░░██║██╔████╔██║██████╦╝";
Write-Host -ForegroundColor Red "   ██║░░██║██║░░░██║██║╚██╔╝██║██╔══██╗";
Write-Host -ForegroundColor Red "   ██████╔╝╚██████╔╝██║░╚═╝░██║██████╦╝";
Write-Host -ForegroundColor Red "   ╚═════╝░░╚═════╝░╚═╝░░░░░╚═╝╚═════╝░";

Write-Host ""
Write-Host -ForegroundColor Red "   ░██████╗░██████╗";
Write-Host -ForegroundColor Red "   ██╔════╝██╔════╝";
Write-Host -ForegroundColor Red "   ╚█████╗░╚█████╗░";
Write-Host -ForegroundColor Red "   ░╚═══██╗░╚═══██╗";
Write-Host -ForegroundColor Red "   ██████╔╝██████╔╝";
Write-Host -ForegroundColor Red "   ╚═════╝░╚═════╝░";

Write-Host ""
Write-Host -ForegroundColor Red "   ██████╗░░█████╗░███╗░░░███╗";
Write-Host -ForegroundColor Red "   ██╔══██╗██╔══██╗████╗░████║";
Write-Host -ForegroundColor Red "   ██████╦╝███████║██╔████╔██║";
Write-Host -ForegroundColor Red "   ██╔══██╗██╔══██║██║╚██╔╝██║";
Write-Host -ForegroundColor Red "   ██████╦╝██║░░██║██║░╚═╝░██║";
Write-Host -ForegroundColor Red "   ╚═════╝░╚═╝░░╚═╝╚═╝░░░░░╚═╝";

Write-Host ""
Write-Host -ForegroundColor Blue "   Made by Srdomy"
Write-Host ""

function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
    $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}
if (!(Test-Admin)) {
    Write-Warning "Please Run This Script as Admin."
    Start-Sleep 10
    Exit
}

$sw = [Diagnostics.Stopwatch]::StartNew()

if (!(Get-PSDrive -Name HKLM -PSProvider Registry)) {
    Try {
        New-PSDrive -Name HKLM -PSProvider Registry -Root HKEY_LOCAL_MACHINE
    }
    Catch {
        Write-Warning "Error Mounting HKEY_Local_Machine"
    }
}
$bv = ("bam", "bam\State")
Try {
    $Users = foreach($ii in $bv) {
        Get-ChildItem -Path "HKLM:\SYSTEM\CurrentControlSet\Services\$($ii)\UserSettings\" | Select-Object -ExpandProperty PSChildName
    }
}
Catch {
    Write-Warning "Error Parsing BAM Key. Likely unsupported Windows Version"
    Exit
}
$rpath = @("HKLM:\SYSTEM\CurrentControlSet\Services\bam\","HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\")

$UserTime = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").TimeZoneKeyName
$UserBias = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").ActiveTimeBias
$UserDay = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").DaylightBias

$Bam = Foreach ($Sid in $Users) {
    $u++
    foreach($rp in $rpath) {
        $BamItems = Get-Item -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Property
        Write-Host -ForegroundColor Red "Extracting " -NoNewLine
        Write-Host -ForegroundColor Blue "$($rp)UserSettings\$SID"
        $bi = 0 
        Try {
            $objSID = New-Object System.Security.Principal.SecurityIdentifier($Sid)
            $User = $objSID.Translate([System.Security.Principal.NTAccount]) 
            $User = $User.Value
        }
        Catch {
            $User = ""
        }
        $i = 0
        ForEach ($Item in $BamItems) {
            $i++
            $Key = Get-ItemProperty -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty $Item

            if ($key.length -eq 24) {
                $Hex = [System.BitConverter]::ToString($key[7..0]) -replace "-",""
                $TimeLocal = Get-Date ([DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $TimeUTC = Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $Exe = $Key[24..($Key.length-1)] -replace "\x00",""
                $exe_name = [System.IO.Path]::GetFileName($exe)
                
                # Verifica se l'estensione è cambiata
                $extensionCheck = Check-FileExtensionChange $Exe

                Write-Host -ForegroundColor White "$exe_name   $($TimeUTC) UTC - $TimeLocal Local ($User)"
                Write-Host -ForegroundColor Yellow "Signature Check: $(Get-Signature -FilePath $Exe)"
                Write-Host -ForegroundColor Yellow "Extension Check: $extensionCheck"
            }
        }
    }
}

$sw.Stop()
Write-Host ""
Write-Host -ForegroundColor Red "Script took: $($sw.Elapsed.TotalSeconds) seconds"
Write-Host ""
Start-Sleep 10
