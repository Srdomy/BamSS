$ErrorActionPreference = "SilentlyContinue"

# Funzione per ottenere la firma del file
function Get-Signature {
    [CmdletBinding()]
     param (
        [string[]]$FilePath
    )

    $Existence = Test-Path -PathType "Leaf" -Path $FilePath
    $Authenticode = (Get-AuthenticodeSignature -FilePath $FilePath -ErrorAction SilentlyContinue).Status
    $Signature = "Invalid Signature (UnknownError)"

    if ($Existence) {
        if ($Authenticode -eq "Valid") {
            $Signature = "Valid Signature"
        }
        elseif ($Authenticode -eq "NotSigned") {
            $Signature = "Invalid Signature (NotSigned)"
        }
        elseif ($Authenticode -eq "HashMismatch") {
            $Signature = "Invalid Signature (HashMismatch)"
        }
        elseif ($Authenticode -eq "NotTrusted") {
            $Signature = "Invalid Signature (NotTrusted)"
        }
        elseif ($Authenticode -eq "UnknownError") {
            $Signature = "Invalid Signature (UnknownError)"
        }
        return $Signature
    } else {
        $Signature = "File Was Not Found"
        return $Signature
    }
}

# Funzione per determinare su quale disco si trova il file
function Get-DriveInfo {
    param (
        [string]$FilePath
    )
    $driveLetter = $FilePath.Split(":")[0]
    return $driveLetter
}

# Funzione per controllare se il file è stato eliminato o spostato nel cestino
function Check-FileDeletion {
    param (
        [string]$FilePath
    )

    # Verifica se il file esiste
    if (Test-Path -Path $FilePath) {
        return "File Exists"
    }
    
    # Se non esiste, controlla il Cestino
    $recycleBinPath = "$env:SystemDrive\$Recycle.Bin"
    $recycleItems = Get-ChildItem -Recurse -Force $recycleBinPath | Where-Object { $_.PSIsContainer -eq $false } | Select-Object FullName
    $foundInRecycle = $recycleItems | Where-Object { $_.FullName -like "*$FilePath*" }

    if ($foundInRecycle) {
        return "File Moved to Recycle Bin"
    } else {
        return "File Deleted Permanently (Shift+Del or Cleared from Recycle Bin)"
    }
}

Clear-Host

# Logo migliorato
Write-Host ""
Write-Host ""
Write-Host -ForegroundColor Red "██████╗░██╗░░░██╗███╗░░░███╗██████╗░"
Write-Host -ForegroundColor Red "██╔══██╗██║░░░██║████╗░████║██╔══██╗"
Write-Host -ForegroundColor Red "██║░░██║██║░░░██║██╔████╔██║██████╦╝"
Write-Host -ForegroundColor Red "██║░░██║██║░░░██║██║╚██╔╝██║██╔══██╗"
Write-Host -ForegroundColor Red "██████╔╝╚██████╔╝██║░╚═╝░██║██████╦╝"
Write-Host -ForegroundColor Red "╚═════╝░░╚═════╝░╚═╝░░░░░╚═╝╚═════╝░"

Write-Host ""
Write-Host -ForegroundColor Red "░██████╗░██████╗"
Write-Host -ForegroundColor Red "██╔════╝██╔════╝"
Write-Host -ForegroundColor Red "╚█████╗░╚█████╗░"
Write-Host -ForegroundColor Red "░╚═══██╗░╚═══██╗"
Write-Host -ForegroundColor Red "██████╔╝██████╔╝"
Write-Host -ForegroundColor Red "╚═════╝░╚═════╝░"

Write-Host ""
Write-Host -ForegroundColor Red "██████╗░░█████╗░███╗░░░███╗"
Write-Host -ForegroundColor Red "██╔══██╗██╔══██╗████╗░████║"
Write-Host -ForegroundColor Red "██████╦╝███████║██╔████╔██║"
Write-Host -ForegroundColor Red "██╔══██╗██╔══██║██║╚██╔╝██║"
Write-Host -ForegroundColor Red "██████╦╝██║░░██║██║░╚═╝░██║"
Write-Host -ForegroundColor Red "╚═════╝░╚═╝░░╚═╝╚═╝░░░░░╚═╝"

Write-Host ""
Write-Host -ForegroundColor Blue "Made by Srdomy"
Write-Host ""

# Funzione per controllare se si dispone dei privilegi di amministratore
function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
    $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}
if (!(Test-Admin)) {
    Write-Warning "Please Run This Script as Admin."
    Start-Sleep 10
    Exit
}

$sw = [Diagnostics.Stopwatch]::StartNew()

if (!(Get-PSDrive -Name HKLM -PSProvider Registry)) {
    Try {
        New-PSDrive -Name HKLM -PSProvider Registry -Root HKEY_LOCAL_MACHINE
    }
    Catch {
        Write-Warning "Error Mounting HKEY_Local_Machine"
    }
}

$bv = ("bam", "bam\State")
Try {
    $Users = foreach($ii in $bv) {
        Get-ChildItem -Path "HKLM:\SYSTEM\CurrentControlSet\Services\$($ii)\UserSettings\" | Select-Object -ExpandProperty PSChildName
    }
}
Catch {
    Write-Warning "Error Parsing BAM Key. Likely unsupported Windows Version"
    Exit
}

$rpath = @("HKLM:\SYSTEM\CurrentControlSet\Services\bam\","HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\")
$UserTime = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").TimeZoneKeyName
$UserBias = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").ActiveTimeBias
$UserDay = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").DaylightBias

$Bam = Foreach ($Sid in $Users) {
    foreach($rp in $rpath) {
        $BamItems = Get-Item -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Property
        Write-Host -ForegroundColor Red "Extracting " -NoNewLine
        Write-Host -ForegroundColor Blue "$($rp)UserSettings\$SID"
        $bi = 0 
        Try {
            $objSID = New-Object System.Security.Principal.SecurityIdentifier($Sid)
            $User = $objSID.Translate([System.Security.Principal.NTAccount]) 
            $User = $User.Value
        }
        Catch {
            $User = ""
        }
        $i = 0
        ForEach ($Item in $BamItems) {
            $i++
            $Key = Get-ItemProperty -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty $Item

            if ($key.length -eq 24) {
                $Hex = [System.BitConverter]::ToString($key[7..0]) -replace "-",""
                $TimeLocal = Get-Date ([DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $TimeUTC = (Get-Date ([DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss").ToUniversalTime()
                $TimeUser = [DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16)).AddMinutes($UserBias)
                $BiasD = [DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16)).AddMinutes($UserDay)
                $d = Get-DriveInfo "$Item"
                if ($item -match '\d{1}') { Get-Signature "$((split-path -path $item).Remove(23)).trimstart("\Device\HarddiskVolume")" } else { $f = "" }

                Write-Output "$i|$User|$Item|Last Run Time (Local) $TimeLocal|Last Run Time (UTC) $TimeUTC|Last Run Time (User) $TimeUser UTC+$BiasD Daylight+ $Dayd |Path $d |FileStatus $f"
            }
        }
    }
}

