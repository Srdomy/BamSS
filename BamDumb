$ErrorActionPreference = "SilentlyContinue"

# Funzione per ottenere il file system del disco
function Get-DriveFileSystem {
    param (
        [string]$DriveLetter
    )
    $driveInfo = Get-PSDrive | Where-Object { $_.Name -eq $DriveLetter }
    if ($driveInfo) {
        return $driveInfo.FileSystem
    } else {
        return "Unknown"
    }
}

# Funzione per determinare su quale disco si trova il file
function Get-DriveInfo {
    param (
        [string]$FilePath
    )
    $driveLetter = $FilePath.Split(":")[0]
    return $driveLetter
}

# Funzione per controllare se la chiave UserSettings esiste
function Check-UserSettingsKey {
    param (
        [string]$Sid,
        [string]$rp
    )

    $keyPath = "$($rp)UserSettings\$Sid"
    if (!(Test-Path $keyPath)) {
        return "L'utente a cui stai facendo il controllo sta cercando di bypassarti perché la Key di regedit UserSettings non esiste."
    } else {
        return "UserSettings key exists."
    }
}

Clear-Host

# Nuovo logo
Write-Host ""
Write-Host ""
Write-Host -ForegroundColor Red "   ░██████╗███████╗██╗░░░░░███████╗";
Write-Host -ForegroundColor Red "   ██╔════╝██╔════╝██║░░░░░██╔════╝";
Write-Host -ForegroundColor Red "   ╚█████╗░█████╗░░██║░░░░░█████╗░░";
Write-Host -ForegroundColor Red "   ░╚═══██╗██╔══╝░░██║░░░░░██╔══╝░░";
Write-Host -ForegroundColor Red "   ██████╔╝███████╗███████╗██║░░░░░";
Write-Host -ForegroundColor Red "   ╚═════╝░╚══════╝╚═╝░░░░░╚═╝░░░░░";
Write-Host ""
Write-Host -ForegroundColor Red "   ██████╗░░█████╗░███╗░░░███╗";
Write-Host -ForegroundColor Red "   ██╔══██╗██╔══██╗████╗░████║";
Write-Host -ForegroundColor Red "   ██████╦╝███████║██╔████╔██║";
Write-Host -ForegroundColor Red "   ██╔══██╗██╔══██║██║╚██╔╝██║";
Write-Host -ForegroundColor Red "   ██████╦╝██║░░██║██║░╚═╝░██║";
Write-Host -ForegroundColor Red "   ╚═════╝░╚═╝░░╚═╝╚═╝░░░░░╚═╝";

Write-Host ""
Write-Host -ForegroundColor Blue "   Made by Srdomy"
Write-Host ""

# Funzione per controllare se si dispone dei privilegi di amministratore
function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
    $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}
if (!(Test-Admin)) {
    Write-Warning "Please Run This Script as Admin."
    Start-Sleep 10
    Exit
}

$sw = [Diagnostics.Stopwatch]::StartNew()

if (!(Get-PSDrive -Name HKLM -PSProvider Registry)) {
    Try {
        New-PSDrive -Name HKLM -PSProvider Registry -Root HKEY_LOCAL_MACHINE
    }
    Catch {
        Write-Warning "Error Mounting HKEY_Local_Machine"
    }
}

$bv = ("bam", "bam\State")
Try {
    $Users = foreach($ii in $bv) {
        Get-ChildItem -Path "HKLM:\SYSTEM\CurrentControlSet\Services\$($ii)\UserSettings\" | Select-Object -ExpandProperty PSChildName
    }
}
Catch {
    Write-Warning "Error Parsing BAM Key. Likely unsupported Windows Version"
    Exit
}

$rpath = @("HKLM:\SYSTEM\CurrentControlSet\Services\bam\","HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\")

$UserTime = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").TimeZoneKeyName
$UserBias = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").ActiveTimeBias
$UserDay = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").DaylightBias

$Bam = Foreach ($Sid in $Users) {
    $u++
    foreach($rp in $rpath) {
        # Controllo se la chiave UserSettings esiste
        $keyStatus = Check-UserSettingsKey -Sid $Sid -rp $rp
        if ($keyStatus -like "bypassarti") {
            Write-Host -ForegroundColor Yellow $keyStatus
            continue
        }

        $BamItems = Get-Item -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Property
        Write-Host -ForegroundColor Red "Extracting " -NoNewLine
        Write-Host -ForegroundColor Blue "$($rp)UserSettings\$SID"
        $bi = 0 
        Try {
            $objSID = New-Object System.Security.Principal.SecurityIdentifier($Sid)
            $User = $objSID.Translate([System.Security.Principal.NTAccount]) 
            $User = $User.Value
        }
        Catch {
            $User = ""
        }
        $i = 0
        ForEach ($Item in $BamItems) {
            $i++
            $Key = Get-ItemProperty -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty $Item

            if ($key.length -eq 24) {
                $Hex = [System.BitConverter]::ToString($key[7..0]) -replace "-",""
                $TimeLocal = Get-Date ([DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $TimeUTC = Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $Bias = -([convert]::ToInt32([Convert]::ToString($UserBias,2),2))
                $Day = -([convert]::ToInt32([Convert]::ToString($UserDay,2),2)) 
                $Biasd = $Bias / 60
                $Dayd = $Day / 60
                $TImeUser = (Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))).addminutes($Bias) -Format "yyyy-MM-dd HH:mm:ss") 
                
                # File path e controllo
                $d = if (((split-path -path $item | ConvertFrom-String -Delimiter "\\").P3) -match '\d{1}') { ((split-path -path $item).Remove(23)).trimstart("\Device\HarddiskVolume") } else { $d = "" }
                $f = if (((split-path -path $item | ConvertFrom-String -Delimiter "\\").P3) -match '\d{1}') { Split-path -leaf ($item).TrimStart() } else { $item } 
                $cp = if (((split-path -path $item | ConvertFrom-String -Delimiter "\\").P3) -match '\d{1}') { ($item).Remove(1,23) } else { $cp = "" }
                $path = if (((split-path -path $item | ConvertFrom-String -Delimiter "\\").P3) -match '\d{1}') { Join-Path -Path "C:" -ChildPath $cp } else { $path = "" } 
                
                # File system del disco
                $Drive = if ($path -ne "") { Get-DriveInfo -FilePath $path } else { $Drive = "" }
                $FileSystem = if ($Drive -ne "") { Get-DriveFileSystem -DriveLetter $Drive } else { $FileSystem = "" }

                # Risultati
                $f,
                $User,
                $TImeUser,
                $FileSystem,
                $Drive | Out-String | Write-Host
            }
        }
    }
}
$sw.Stop()

Write-Host ""
Write-Host -ForegroundColor Red "Execution Finished in $($sw.Elapsed.TotalSeconds) seconds."
Start-Sleep 20
