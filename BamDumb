$ErrorActionPreference = "SilentlyContinue"

function Get-Signature {
    param (
        [string[]]$FilePath
    )
    if (-not (Test-Path -PathType "Leaf" -Path $FilePath)) {
        return "File Was Not Found"
    }

    $Authenticode = (Get-AuthenticodeSignature -FilePath $FilePath -ErrorAction SilentlyContinue).Status
    switch ($Authenticode) {
        "Valid" { return "Valid Signature" }
        "NotSigned" { return "Invalid Signature (NotSigned)" }
        "HashMismatch" { return "Invalid Signature (HashMismatch)" }
        "NotTrusted" { return "Invalid Signature (NotTrusted)" }
        default { return "Invalid Signature (UnknownError)" }
    }
}

function Get-DriveInfo {
    param (
        [string]$FilePath
    )
    return $FilePath.Split(":")[0]
}

function Check-FileDeletion {
    param (
        [string]$FilePath
    )
    if (Test-Path -Path $FilePath) {
        return "File Exists"
    }

    $recycleBinPath = "$env:SystemDrive\$Recycle.Bin"
    $foundInRecycle = Get-ChildItem -Recurse -Force $recycleBinPath | Where-Object { $_.FullName -like "*$FilePath*" }
    return $foundInRecycle ? "File Moved to Recycle Bin" : "File Deleted Permanently (Shift+Del or Cleared from Recycle Bin)"
}

Clear-Host

# Logo
Write-Host ""
Write-Host -ForegroundColor Red "   ██████╗░██╗░░░██╗███╗░░░███╗██████╗░";
Write-Host -ForegroundColor Red "   ██╔══██╗██║░░░██║████╗░████║██╔══██╗";
Write-Host -ForegroundColor Red "   ██║░░██║██║░░░██║██╔████╔██║██████╦╝";
Write-Host -ForegroundColor Red "   ██║░░██║██║░░░██║██║╚██╔╝██║██╔══██╗";
Write-Host -ForegroundColor Red "   ██████╔╝╚██████╔╝██║░╚═╝░██║██████╦╝";
Write-Host -ForegroundColor Red "   ╚═════╝░░╚═════╝░╚═╝░░░░░╚═╝╚═════╝░";

Write-Host ""
Write-Host -ForegroundColor Red "   ░██████╗░██████╗";
Write-Host -ForegroundColor Red "   ██╔════╝██╔════╝";
Write-Host -ForegroundColor Red "   ╚█████╗░╚█████╗░";
Write-Host -ForegroundColor Red "   ░╚═══██╗░╚═══██╗";
Write-Host -ForegroundColor Red "   ██████╔╝██████╔╝";
Write-Host -ForegroundColor Red "   ╚═════╝░╚═════╝░";

Write-Host ""
Write-Host -ForegroundColor Red "   ██████╗░░█████╗░███╗░░░███╗";
Write-Host -ForegroundColor Red "   ██╔══██╗██╔══██╗████╗░████║";
Write-Host -ForegroundColor Red "   ██████╦╝███████║██╔████╔██║";
Write-Host -ForegroundColor Red "   ██╔══██╗██╔══██║██║╚██╔╝██║";
Write-Host -ForegroundColor Red "   ██████╦╝██║░░██║██║░╚═╝░██║";
Write-Host -ForegroundColor Red "   ╚═════╝░╚═╝░░╚═╝╚═╝░░░░░╚═╝";

Write-Host ""
Write-Host -ForegroundColor Blue "   Made by Srdomy"
Write-Host ""

# Check for admin privileges
function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}
if (-not (Test-Admin)) {
    Write-Warning "Please Run This Script as Admin."
    Start-Sleep 10
    Exit
}

$sw = [Diagnostics.Stopwatch]::StartNew()

# Cache registry properties
$timeZoneInfo = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation"
$UserTime = $timeZoneInfo.TimeZoneKeyName
$UserBias = -[convert]::ToInt32([Convert]::ToString($timeZoneInfo.ActiveTimeBias, 2), 2)
$UserDay = -[convert]::ToInt32([Convert]::ToString($timeZoneInfo.DaylightBias, 2), 2)

# Get BAM users
$bamUsers = Get-ChildItem -Path "HKLM:\SYSTEM\CurrentControlSet\Services\bam\UserSettings" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty PSChildName

$BamResults = foreach ($Sid in $bamUsers) {
    $bamItems = Get-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Services\bam\UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Property
    foreach ($Item in $bamItems) {
        $key = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\bam\UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty $Item
        if ($key.length -eq 24) {
            $Hex = [System.BitConverter]::ToString($key[7..0]) -replace "-", ""
            $TimeLocal = Get-Date ([DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
            $TimeUTC = Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
            $TimeUser = (Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))).AddMinutes($UserBias) -Format "yyyy-MM-dd HH:mm:ss")

            # File path and checks
            $path = "C:\Path\To\File" # Replace with actual logic to derive the path
            $sig = Get-Signature -FilePath $path
            $driveInfo = Get-DriveInfo -FilePath $path
            $deletionStatus = Check-FileDeletion -FilePath $path

            [PSCustomObject]@{
                'Examiner Time' = $TimeLocal
                'Last Execution Time (UTC)' = $TimeUTC
                'Last Execution User Time' = $TimeUser
                Application = $Item
                Path = $path
                Signature = $sig
                Drive = $driveInfo
                'Deletion Status' = $deletionStatus
                User = $Sid
            }
        }
    }
}

$BamResults | Out-GridView -PassThru -Title "BAM key entries $($BamResults.Count) - User TimeZone: ($UserTime)"

$sw.Stop()
$t = $sw.Elapsed.TotalMinutes
Write-Host "Elapsed Time $t Minutes" -ForegroundColor Yellow
